[Is Inheritance Dead? A Detailed Look Into the Decorator Pattern](https://dzone.com/articles/is-inheritance-dead)
#继承已死?深入浅出装饰模式
当面向对象编程被提出时,继承是用来扩展对象功能的主要模式.如今,继承通常被认作是一种设计味道(design smell).
事实上,使用继承扩展对象通常导致类层级的爆炸增加(详见 **类层级的爆炸增加**章节).另外,很多流行的语言,比如Java和C#并不支持多继承,限制了这种方式带来的好处.
装饰模式为对象的扩展提供了除继承外的其他灵活选择.这种模式设计为多个装饰者可以相互叠加,每个装饰者都有新功能.和继承对比,一个装饰者可以在任意给定的接口上实现,消除了对整个类层级的要求.此外,使用装饰模式带来的是整洁易测的代码(详见 **易测性和其他优势**章节).
悲观的看,如今很大一部分的软件开发人员对装饰模式的理解有限.这一部分归结于教育的缺失,也是因为编程语言没有跟上面向对象设计原则的演变,未能鼓励开发者学习使用这些模式.
在这篇文章中,我们将讨论使用装饰模式相比继承的优势,并建议面向对象编程语言应该对装饰模式有原生的支持.事实上,我们相信装饰模式比继承带来更多的整洁易测的代码.

##类层级的爆炸增加
类层级的爆炸增加出现在需要给类添加新功能时,会导致类层级指数级增加.举例说明,我们看以下接口:
```java
public interface IEmailService
{
    void send(Email email);
    Collection<EmailInfo> listEmails(int indexBegin, int indexEnd);
    Email downloadEmail(EmailInfo emailInfo);
}
```
默认 *EmailService*的实现会在连接邮件服务器失败时抛出异常.我们想扩展 *EmailService*的实现,在请求失败时重试几次再放弃.我们也想能够选择实现是否线程安全的.
我们可以通过在 *EmailService*类添加重试操作和线程安全特性来达到这个目的.类的构造器接受参数,开/关每个特性.然而,这个解决方案破坏了[单一职责原则](https://en.wikipedia.org/wiki/Single_responsibility_principle)(因为 *EmailService*拥有额外的职责)和[开闭原则](https://en.wikipedia.org/wiki/Open/closed_principle)(因为这个类扩展时需要修改).此外,*EmailService*类可能是第三方库的一部分,我们无法修改.
一般,不通过修改类而达到扩展类的方法是使用继承.通过继承,派生的类可以继承父类的属性和行为,并可以随意扩展或重载方法.在 *EmailService*的例子里,我们可以创建三个子类,一个增加重试,一个增加线程安全,一个增加所有特性.类的继承如下图所示:
![](https://dzone.com/storage/temp/3585502-fig1.png)
注意 *ThreadSafeEmailServiceWithRetries*可以继承自 *EmailServiceWithRetries*或 *ThreadSafeEmailService*(如果支持多继承可以两者).然而类的数量和产生的功能是相似的.
除了重试和线程安全,我也想扩展我们的 email 服务API,让每个人都能选择开启日志.我们再一次用继承来扩展类的层次,如下所示:
![](https://dzone.com/storage/temp/3585517-fig2.png)
注意添加的支持日志的类的数量等同于已存在层级的类数量(在这个例子里是 4 个).为了确认行为,我们为层级添加缓存并检查结果.新的层级如下所示:
![](https://dzone.com/storage/temp/3585534-fig3.png)
你可以看到,类的层级结构指数级增长并变得难以管理.这个问题就是 *类层级的爆炸增加*

##装饰模式的拯救
装饰模式通过组合而不是继承来扩展对象功能。它解决了类层级爆炸增加的问题，因为每个新特性只需要一个新装饰器。为了阐明这一点，让我们为重试(retries)这个特性创建装饰器。举个例子，使用三次循环的重试。下面是 *EmailServiceRetryDecorator*：
```java
public class EmailServiceRetryDecorator implements IEmailService
{
    private final IEmailService emailService;
    public EmailServiceRetryDecorator(IEmailService emailService) {
        this.emailService = emailService;
    }
    @Override
    public void send(Email email) {
        executeWithRetries(() -> emailService.send(email));
    }
    @Override
    public Collection<EmailInfo> listEmails(int indexBegin, int indexEnd) {
        final List<EmailInfo> emailInfos = new ArrayList<>();
        executeWithRetries(() -> emailInfos.addAll(emailService.listEmails(indexBegin, indexEnd)));
        return emailInfos;
    }
    @Override
    public Email downloadEmail(EmailInfo emailInfo) {
        final Email[] email = new Email[1];
        executeWithRetries(() -> email[0] = emailService.downloadEmail(emailInfo));
        return email[0];
    }
    private void executeWithRetries(Runnable runnable) {
        for(int i=0; i<3; ++i) {
            try {
                runnable.run();
            } catch (EmailServiceTransientError e) {
                continue;
            }
            break;
        }
    }
}
```
请注意，*EmailServiceRetryDecorator* 的构造器有一个 *IEmailService* 的引用，它可以是 *IEmailService*的任何实现（包括装饰器本身）。这将装饰器完全从 *IEmailService* 的特定实现中解耦，并提高了它的复用性和测试性。同样的，我们可以为线程安全、记录日志和缓存创建装饰器。类的层次如下图所示：
![](https://dzone.com/storage/temp/3585674-fig4.png)
正如上面的类图所示，每个新特性只需要一个类，并使得类层级简单可伸缩（线性增长）。

##装饰器队列
首先，使用装饰模式看起来每个实现只能增加一个特性。然而，因为装饰器可以互相叠在一起，无穷无尽。