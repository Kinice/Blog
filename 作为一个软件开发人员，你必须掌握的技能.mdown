[The Technical Skills You Need to Have as a Software Developer](https://dzone.com/articles/the-technical-skills-you-need-to-have-as-a-softwar)

#作为一个软件开发人员，你必须掌握的技能
我强烈支持并帮助软件开发者在他们的技术能力之外提升"软技能".事实上我曾写过一本关于这点的[书](http://simpleprogrammer.com/softskills)-但毫无疑问:**技术能力也相当重要**
我的意思是,当你无法写代码并开发软件,你所有掌握的软技能毫无意义.或许你是一个称职的管理者或指导者,但不是一个合格的开发者.
但如果你读了下面这些,我相信你会有兴趣成为一名软件开发者-或是一个大牛-所以我们来聊聊 **你需要掌握的技术技能**
#技术买单
![](https://spzone-simpleprogrammer.netdna-ssl.com/wp-content/uploads/2016/07/Technical-Skills-As-A-Software-Developer-1024x576.png)
如今,这个话题淹没了众多开发新人,因为感觉**太多东西要掌握**,而且不知道**从哪里开始**.
这里我想打破这个话题.探讨一下最**基本和受益**的技术技能,让你在成为软件开发者的路上越走越远.
这一章并不是要把你成为开发者需要掌握的技术技能全部列出,我会试着列举几个基本的,给你一个概述.
不用害怕.本书这一章标题"关于软件开发你需要知道的",我给大家一个章节概述这些技能,深入浅出.
废话少说,简洁明了的看一下我认为最重要的技术技能.

#一门编程语言
我认为这个话题作为开始是明智之选,你觉得呢?
不掌握一门编程语言就不是一个合格的程序员-Vern,你知道我什么意思(详见[Ernest P. Worrell](https://en.wikipedia.org/wiki/Ernest_P._Worrell)不懂这个梗也没关系)
我在"学习哪种编程语言"章节中讨论过如何选择,所以不要太紧张.
我马上就表示[编程语言的选择](https://simpleprogrammer.com/2013/12/02/programming-language-learn/)并不是你想象的那样重要.
相反,我们来聊聊为什么我建议学习一门编程语言,而不是广泛涉猎.
很多开发新手在找到一份工作前,花时间同时学习很多编程语言.
然而我认为你最好从一门编程语言开始,不要超前学习,否则你会迷惑,并让你无力学习其他的技术技能.
我建议你深入学习一门编程语言,然后你会对用这门语言写代码非常的自信.
记住一旦你决定成为何种软件开发者,你必须足够专一.

#结构化代码
![](https://spzone-simpleprogrammer.netdna-ssl.com/wp-content/uploads/2016/07/Depositphotos_25021863_l-2015-1-768x512.jpg)
当学习完一门编程语言-或是正在学习.接下来你需要知道的一件事情就是如何正确的结构化你的代码.
我已经给过你一份很棒的资源来帮助你学习这种技能:[Code Complete by Steven McConnell](http://www.amazon.com/exec/obidos/ASIN/0735619670/makithecompsi-20).
什么是结构化代码?
意思是编写 **好的,清晰的,易懂的代码不需要大量注释,因为代码本身就传递了信息.**
很多软件开发者在整个职业生涯中都没有学习这种技术,不幸的是这种技术也是成为合格开发者的基础.
好的代码结构不仅仅是完成工作,更是艺术的结晶.
**结构化你的代码真的是软件开发的艺术**但这也饱受批评,因为无论你或同事维护起你的代码都要比写新代码更费时间.
我并不想在这教你如何正确结构化你的代码-因为我在上面已经给过你一个很棒的资源了.但你一定要在开始就学会如何编写干净整洁的代码,而不是在之后.
我确信这一点,即使你是个初学者,只要你能写干净整洁易懂,表达自身意义的结构化代码,任何看到你代码的人都觉得你是个有经验的专家.
至少在一定程度上,你将把职业当做专业,而不是一份工作:[匠人的标志](http://www.amazon.com/exec/obidos/ASIN/0137081073/makithecompsi-20)

#面向对象设计
![](https://spzone-simpleprogrammer.netdna-ssl.com/wp-content/uploads/2016/07/OOD-768x768.png)
这一点仍待讨论,尤其是你正在学习一门非面向对象的编程语言.但大多软件开发的思想建立在面向对象之上,所以你必须了解它.
[面向对象设计](http://www.amazon.com/exec/obidos/ASIN/020189551X/makithecompsi-20)是在设计复杂的程序时,将它们分割成独立的类和对象(实例化的类),每个都有封装单独的功能,角色和责任.
在软件开发中,我们总是尝试处理复杂度.
基于对象的思想帮助我们处理问题,因为它允许我们把复杂的系统定义并设计成相互联系的组件,而不是设计成一个复杂的整体.
如今有大量的函数语言,但你会发现,受面向对象设计和分析的影响,软件开发中流行的语言和模式仍然很重要.
你必须深刻理解什么是类,继承有哪几种形式-该什么时候使用,也要理解[多态](https://simpleprogrammer.com/2013/01/13/so-you-think-you-can-polymorph/)和封装.

#算法和数据结构
